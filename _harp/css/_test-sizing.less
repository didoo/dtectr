// ==========================================
//   MIN/MAX-WIDTH/HEIGHT
// ==========================================

// ‘min-’ or ‘max-’ prefixes to express "greater or equal to" and "smaller or equal to" constraints
// NOTICE: `-device` declarations are deprecated

.sizing > div[class^='min-width'] { .set-color(@color-purple); }
.sizing > div[class^='max-width'] { .set-color(@color-olive); }

.sizing > div[class^='min-height'] { .set-color(@color-teal); }
.sizing > div[class^='max-height'] { .set-color(@color-maroon); }

@min-size: 300px;
@max-size: 1300px;

.batch-generate-min-media-queries(@min-size);
.batch-generate-max-media-queries(@max-size);

.batch-generate-min-media-queries(@size) when (@size =< @max-size) {

    @min-width: ~'(min-width: @{size})';
    @min-height: ~'(min-height: @{size})';

    @media only screen and @min-width {
        .sizing > .min-width { .set-message("min-width: @{size}"); }
    }
    @media only screen and @min-height {
        .sizing > .min-height { .set-message("min-height: @{size}"); }
    }
    // generate the looping in less
    .batch-generate-min-media-queries(@size + 10px);
}


.batch-generate-max-media-queries(@size) when (@size >= @min-size) {

    @max-width: ~'(max-width: @{size})';
    @max-height: ~'(max-height: @{size})';

    @media only screen and @max-width {
        .sizing > .max-width { .set-message("max-width: @{size}"); }
    }
    @media only screen and @max-height {
        .sizing > .max-height { .set-message("max-height: @{size}"); }
    }

    // generate the looping in less
    .batch-generate-max-media-queries(@size - 10px);

}
